package com.mmall.controller.portal;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.pojo.User;import com.mmall.service.IUserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import javax.servlet.http.HttpSession;/** * Created by zhengquan on 2017/5/26. */@Controller@RequestMapping("/user/")public class UserController {    @Autowired    private IUserService iUserService;    /**     * 用户登陆     * @param username     * @param password     * @param session     * @return     */    @RequestMapping(value = "login.do",method = RequestMethod.POST)    //用来对返回值对象反序列化    @ResponseBody    public ServerResponse<User> login(String username,String password,HttpSession session){        ServerResponse<User>serverResponse = iUserService.login(username,password);        if(serverResponse.isSuccess()){           session.setAttribute(Const.CURRENT_USER,serverResponse.getData());        }        return serverResponse;    }    /**     * 用户登出     * @param session     * @return     */    @RequestMapping(value = "logout.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> logout(HttpSession session){        session.removeAttribute(Const.CURRENT_USER);        return ServerResponse.createBySuccess();    }    /**     * 用户注册     * @param user     * @return     */    @RequestMapping(value = "register.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> register(User user){        return iUserService.register(user);    }    /**     * 用户名及Email校验接口     * @param str     * @param type     * @return     */    @RequestMapping(value = "check_valid.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> checkValid(String str,String type){        return iUserService.checkValid(str,type);    }    /**     * 获取用户信息     * @param session     * @return     */    @RequestMapping(value = "get_user_info.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<User>getUserInfo(HttpSession session){        User user = (User) session.getAttribute(Const.CURRENT_USER);        if(user != null){            return ServerResponse.createBySuccess(user);        }        return ServerResponse.createByErrorMessage("用户未登陆，无法获取当前用户信息");    }    /**     * 获取找回密码的问题     * @param username     * @return     */    @RequestMapping(value = "forget_get_question.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> forgetQuestion(String username){        return iUserService.selectQuestion(username);    }    /**     * 校验找回密码问题的答案     * @param username     * @param question     * @param answer     * @return     */    @RequestMapping(value = "forget_check_answer.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> checkForgetQuestion(String username,String question,String answer){        return iUserService.checkAnswer(username, question, answer);    }    /**     * 找回密码 重置密码     * @param username     * @param newPassword     * @param forgetToken     * @return     */    @RequestMapping(value = "forget_reset_password.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> forgetResetPassword(String username,String newPassword,String forgetToken){       return iUserService.forgetResetPassword(username,newPassword,forgetToken);    }    /**     * 登陆下的重置密码     * @param oldPassword     * @param newPassword     * @param session     * @return     */    @RequestMapping(value = "reset_password.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<String> resetPassword(String oldPassword,String newPassword,HttpSession session){        User user = (User) session.getAttribute(Const.CURRENT_USER);        if(user == null){            return ServerResponse.createByErrorMessage("用户未登陆");        }        return iUserService.resetPassword(oldPassword,newPassword,user);    }    /**     * 更新个人用户信息     * @param user     * @param session     * @return     */    @RequestMapping(value = "update_information.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<User> updateInformation(User user,HttpSession session){        User currentUser = (User) session.getAttribute(Const.CURRENT_USER);        if(currentUser == null){            return ServerResponse.createByErrorMessage("用户未登陆");        }        user.setId(currentUser.getId());        user.setUsername(currentUser.getUsername());        ServerResponse<User> serverResponse = iUserService.updateInformation(user);        if (serverResponse.isSuccess()){            session.setAttribute(Const.CURRENT_USER,serverResponse.getData());        }        return serverResponse;    }    /**     * 获取个人用户信息     * @param session     * @return     */    @RequestMapping(value = "get_information.do",method = RequestMethod.POST)    @ResponseBody    public ServerResponse<User>getInformation(HttpSession session){        User currentUser = (User) session.getAttribute(Const.CURRENT_USER);        if(currentUser == null){            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(),"未登陆要求强制登陆,status = 10");        }        return iUserService.getInformation(currentUser.getId());    }}